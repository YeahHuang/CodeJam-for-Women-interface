#-*- coding: utf-8 -*-
'''
没感叹号就不是multifactorial
5 + >=5个感叹号 为5

powerlevel > 0 无前置0

不会喊不确定的事情 她永远不会使用比她需要的更多的感叹号


Case #1: ...
Case
Case #3: IT'S OVER 9000!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
Case #4: IT'S OVER 9000!!
Case #5: IT'S OVER 9000!


7922, 6338, 5282, 4528, 3962, 3522, 3170, 2882, 2642, 2440
def san(i):
    return  9000 * (9000 - i) * (9000 - 2*i) 

def si(i):
    return 9000*(9000-i)*(9000-2*i)*(9000-3*i)

def wu(i):
    return 9000*(9000-i)*(9000-2*i)*(9000-3*i)*(9000-4*i)

official python2 solution: math.log10 相加 大法好！

import math

def multifactorial9000(num_exc):
  ans = math.log10(9000)
  curr = 9000
  curr -= num_exc
  while curr > 0:
    ans += math.log10(curr)
    curr -= num_exc
  return math.ceil(ans)

# from number of exclamation points to number of digits
digits = [-1]*9001
for num_exc in range(1, 9001):
  digits[num_exc] = multifactorial9000(num_exc)

def solve(numdigits):
  i = 1
  while i <= 9000 and numdigits <= digits[i]:
    i += 1
  if i > 9000:
    return "..."
  return "IT'S OVER 9000" + "!"*i

t = int(raw_input().strip())
for case in range(1, t+1):
  d = int(raw_input().strip())
  print "Case #" + str(case) + ": " + str(solve(d))

'''

from functools import reduce
import math
def multiply(a, b): #python高精度啥啊！ 人家明明支持大数相乘
    # got from https://blog.csdn.net/xiongyangg/article/details/50756864 
    #a = list(map(lambda x : int(x), a.strip()))
    b = list(map(lambda x : int(x), b.strip()))
    c = list(map(lambda x : 0, ("0" + str(a) + str(b)).strip()))
    index = len(c) - 1;
    for i in range(len(a) - 1, -1, -1):
        pos = 0
        for j in range(len(b) - 1, -1, -1):
            temp = a[i] * b[j] + c[index - pos] #两个乘数相乘,并加上在此前一次的进位
            c[index - pos] = temp % 10 #保存运算求余结果
            c[index - pos - 1] += temp // 10 #处理进位,进位可以是0或者大于0的数
            pos += 1
        index -= 1
    i=0
    while (c[i]==0):
        i+=1
    return c[i:]
    '''
    mul = reduce(lambda x, y : str(x) + str(y), c) #将list中的内容转换为字符串
    i = 0
    while (i<len(mul) and mul[i]=='0'):
        i+=1
    if i==len(mul):
        mul='0'
        print("ERROR! mul=0 with a=%s b=%s"%(a,b))
    else:
        mul=mul[i:]
    return mul
    '''


q=p1=p2="1"
step = 31683
exc = [-1 for i in range(31685)]
debug=True

#dabiao = [-1, 31682, 15842, 10562,7922, 6338, 5282, 4528, 3962, 3522, 3170, 2882, 2642, 2440, 2265, 2114, 1983, 1866,  1762, 1670,1586, 1511, 1442, 1380, 1322,  1269, 1221, 1176, 1134, 1095, 1058, 1025 ]
#dabiao = [-1, 31682,15842,10562,7922,6338,5282,4528,3962,3522,3170,2882,2642,2440,2265,2114,1983,1866,1762,1670,1586,1511,1442,1380,1322,1269,1221,1176,1134,1095,1058,1025,993,962,934,908,882,859,836,815,794,775,757,739,723,706,691,677,663,649,636,624,612,600,589,578,568,558,549,540,530,522,514,505,497,490,483,476,469,462,455,449,442,437,431,424,420,414,409,403,399,394,389,384,380,375,371,367,363,359,354,350,347,343,339,336,332,329,325,322,319,316,313,310,307,304,301,299,296,293,290,288,286,283,280,278,276,273,271,269,266,265,262,260,258,255,254,252,250,248,247,244,243,241,239,237,236,234,232,230,229,227,226,223,221,219,218,216,215,213,212,211,209,208,207,205,202,201,199,198,197,195,194,192,191,190,188,187,185,184,183,181,180,178,177,176,174,173,172,171,170,169,167,166,165,164,163,162,160,159,158,156,155,154,153,152,151,149,148,147,146,145,144,142,141,139,138,137,135,134,133,132,131,130,128,127,126,125,124,123,121,120,119,118,117,116,115,114,113,112,111,110,109,107,106,105,104,103,102,101,100,99,98,97,96,95,94,93,92,91,90,89,88,86,85,84,83,82,81,80,79,78,77,75,74,73,72,71,70,68,67,66,65,64,63,62,61,60,59,58,57,56,55,54,53,52,51,50,49,48,47,46,45,44,43,42,41,40,39,38,37,36,35,34,33,32,31,30,29,28,27,26,25,24,23,22,21,20,19]
dabiao = [-1, 31682,15842,10562,7922,6338,5282,4528,3962,3522,3170,2882,2642,2440,2265,2114,1983,1866,1762,1670,1586,1511,1442,1380,1322,1269,1221,1176,1134,1095,1058,1025,993,962,934,908,882,859,836,815,794,775,757,739,723,706,691,677,663,649,636,624,612,600,589,578,568,558,549,540,530,522,514,505,497,490,483,476,469,462,455,449,442,437,431,424,420,414,409,403,399,394,389,384,380,375,371,367,363,359,354,350,347,343,339,336,332,329,325,322,319,316,313,310,307,304,301,299,296,293,290,288,286,283,280,278,276,273,271,269,266,265,262,260,258,255,254,252,250,248,247,244,243,241,239,237,236,234,232,230,229,227,226,223,221,219,218,216,215,213]

for exc_num in range(1, 1990):
    if exc_num<150:
        len_mul = dabiao[exc_num]
    else:
        mul = 1
        j = 9000
        while j>0:
            mul *=j
            j-=exc_num
        len_mul= math.ceil(math.log10(mul))
        '''
        mul = [1]
        j = 9000
        while j>0:
            mul = multiply(mul, str(j))
            j-=exc_num
        len_mul = len(mul)
        '''
    if (debug):
        print(len_mul,end=',')
    if len_mul<step:
        for i in range(len_mul+1, step+1):
            exc[i] = exc_num
        #if (debug):
        #    print(len_mul,end=',')
        step = len_mul

print(exc[31683], exc[31682], exc[206], exc[19], exc[6], exc[5], exc[1])

'''
exc[5] = 9000 - 1
exc[6] = 9000 - 11
exc[7] = 9000 - 111
exc[8] = 9000 - 1111
exc[9] = 4499
exc[10] = 4488
exc[11] = 4380
exc[12] = 3492

exc[13] = 2998
exc[14] = 2980
exc[15] = 2822

exc[16] = 2250
exc[17]=2246
exc[18]=2213
exc[19]=1990




i = 3000
step = 11
while (i<4500):
    while ( i<4500 and san(i) > 10**step):
        i+=1
    if (exc[step+1]!=i):
        print("ERROR! step=%d exc[step+1]=%d i=%d"%(step, exc[step+1], i))
    exc[step+1] = i
    if (debug):
        print("i=%d, san(i)=%d  san(i+1)=%d  san(i-1)=%d exec[%d]=%d"%(i,san(i),san(i+1),san(i-1), step+1, i-1))
    step-=1


i=2250
step = 14
while (i<3000):
    while ( i<2999 and si(i) > 10**step):
        i+=1
    if (exc[step+1]!=i):
        print("ERROR! step=%d exc[step+1]=%d i=%d"%(step, exc[step+1], i))
    exc[step+1] = i
    if (debug):
        print("i=%d, si(i)=%d  si(i+1)=%d  si(i-1)=%d exec[%d]=%d"%(i,si(i),si(i+1),si(i-1), step+1, i))
    step-=1


step = 18
i=1800
while (i<2250):
    while ( i<2249 and wu(i) > 10**step):
        i+=1
    if (exc[step+1]!=i):
        print("ERROR! step=%d exc[step+1]=%d i=%d"%(step, exc[step+1], i))
    exc[step+1] = i
    if (debug):
        print("i=%d, wu(i)=%d  wu(i+1)=%d  wu(i-1)=%d exec[%d]=%d"%(i,wu(i),wu(i+1),wu(i-1), step+1, i))
    step-=1

if debug:
    print("step=%d"%step)
'''



T = int(input())
for i in range(T):
    d = int(input())
    if d>31683:
        d = 31683
    if d<=4:
        ans = "..."
    else:
        ans = "IT'S OVER 9000"
        for j in range(exc[d]):
            ans += '!'
    print("Case #%d: %s"%(i+1, ans))



